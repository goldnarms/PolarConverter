<#@ template language="C#" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="T4Toolbox.tt" #>
<#
// <copyright file="PolarTestGenerator.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>


#>
<#@ import namespace="System.IO" #>
using System.Configuration;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Should;
using PolarConverter.BLL.Entiteter;
using PolarConverter.BLL.Helpers;

namespace PolarConverter.Test
{
    [TestClass]
    public class GeneratedTests : BaseTest
    {
<# 
string[] filePaths = Directory.GetFiles(@"C:\Google Drive\Prosjekt\Polar\PolarFiler\", "*.hrm");
foreach(var filePath in filePaths){
var fileName = filePath.Substring(filePath.LastIndexOf("\\") +1, filePath.Length - filePath.LastIndexOf("\\") - 5)
.Replace("(", "")
.Replace(")", "")
.Replace(" ", "")
.Replace("-", "")
.Replace("_", "")
.Replace(".", "")
.Replace("'", "")
.Replace("+", "")
.Replace(",", "")
.Replace("&", "og")
.Replace("–", "");
var adjustedFilepath = "PolarFiler\\" + filePath.Substring(filePath.LastIndexOf("\\") +1, filePath.Length - filePath.LastIndexOf("\\") - 1);
string gpxPath = filePath.ToLower().Contains(".hrm") ? filePath.Substring(0, filePath.ToLower().IndexOf(".hrm")) + ".gpx" : "";
string gpxReference = filePath.ToLower().Contains(".hrm") ? filePath.Substring(0, filePath.ToLower().IndexOf(".hrm")) + ".gpx" : "";
#>
	

        [TestMethod]
        public void Hrm<#=fileName#>Test() 
        {
			var polarFile = TestHelper.GeneratePolarFile(@"<#=adjustedFilepath#>", "<#=fileName#>");
			<#
			var temp = @"" + gpxPath;
			var gpxVersion = "\"1.0\"";
			if (File.Exists(temp))
            {
			#>
            polarFile.GpxFile = new GpxFile()
            {
                Name = "<#=fileName#>",
                Reference = @"<#=gpxReference#>",
				<#
                using (var textReader = new StreamReader(@gpxReference))
                {
                    var gpxNodeHit = false;
                    while (!textReader.EndOfStream)
                    {
                        var line = textReader.ReadLine();
						var key = "version=";
                        if (line != null)
                        {
                            if (line.Contains("gpx") && line.Contains("version="))
                            {
								var keyIndex = line.IndexOf(key, StringComparison.Ordinal);
								var totalLength = keyIndex + key.Length + 5;
								var v = line.Length >= totalLength ? line.Substring(keyIndex + key.Length, 5) : "1.0";
								gpxVersion = v.Replace("\t", "").Replace("\r", "").Trim();
                                break;
                            }
                            if (line.Contains("gpx"))
                            {
                                gpxNodeHit = true;
                            }
                            // Can read version after xml
                            else if (gpxNodeHit && line.Contains("version="))
                            {
								var keyIndex = line.IndexOf(key, StringComparison.Ordinal);
								var totalLength = keyIndex + key.Length + 5;
								var v = line.Length >= totalLength ? line.Substring(keyIndex + key.Length, 5) : "1.0";
								gpxVersion = v.Replace("\t", "").Replace("\r", "").Trim();
                            }
                        }

                    }
                }
				#>
                Version = <#=gpxVersion#>
            };
			<#
            }
			#>
            var polarFiles = new[]
            {
                polarFile
            };

            this.SetPolarFiles(polarFiles);
            var fileContent = File.ReadAllText(@"<#=filePath#>");
			var version = StringHelper.HentVerdi("Version=", 3, fileContent);
            var hasAltitude = (version == "102" || version == "105") ? StringHelper.HentVerdi("Mode=", 1, fileContent, 1) == "1" : StringHelper.HentVerdi("SMode=", 1, fileContent, 2) == "1";
			var hasCadence  = (version == "102" || version == "105") ? StringHelper.HentVerdi("Mode=", 1, fileContent, 1) == "0" : StringHelper.HentVerdi("SMode=", 1, fileContent, 1) == "1";
            var date = StringHelper.HentVerdi("Date=", 8, fileContent);
            var time = StringHelper.HentVerdi("StartTime=", 10, fileContent);
            var startTime = string.Format("{0} {1}", date, time).KonverterTilDato().AddHours(ViewModel.TimeZoneOffset);
            var duration = StringHelper.HentVerdi("Length=", 10, fileContent).ToTimeSpan().TotalSeconds;
            var result = ConversionService.Convert(ViewModel);
            ZipFileReference = result.Reference;
            var fileReferences = StorageHelper.Unzip(result.Reference);
            fileReferences.Count().ShouldEqual(1);
			result.ErrorMessages.Count.ShouldEqual(0);
            foreach (var reference in fileReferences)
            {
                var trainingDoc = StorageHelper.ReadXmlDocument(reference, typeof(TrainingCenterDatabase_t)) as TrainingCenterDatabase_t;
                //trainingDoc.Activities.Activity[0].Lap.Sum(l => l.TotalTimeSeconds).ShouldEqual(duration);
                var firstLap = trainingDoc.Activities.Activity[0].Lap[0];
                //firstLap.Calories.ShouldBeGreaterThan(Zero);
				if(firstLap.Track.Count() > 0) {
					firstLap.Track[0].AltitudeMetersSpecified.ShouldEqual(hasAltitude);
					firstLap.Track[0].CadenceSpecified.ShouldEqual(hasCadence);
				}
                firstLap.StartTime.ShouldEqual(startTime);
            }

        }
<#}#>
    }
}
<#

#>
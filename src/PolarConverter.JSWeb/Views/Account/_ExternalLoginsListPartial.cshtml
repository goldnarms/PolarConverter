@using Microsoft.Owin.Security

<h4>Use another service to log in.</h4>
<hr />
@{
    var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
    if (loginProviders.Count() > 0)
    {
        string action = Model.Action;
        string returnUrl = Model.ReturnUrl;
        using (Html.BeginForm(action, "Account", new { ReturnUrl = returnUrl }))
        {
            @Html.AntiForgeryToken()
            <div id="socialLoginList">
                <p>
                    @Html.ActionLink("Strava", "RegisterWithStrava", null, new { @class = "btn btn-provider btn-strava", title = "Log in using your Strava account" })
                    @Html.ActionLink("Runkeeper", "LoginRunkeeper", null, new { @class = "btn btn-provider btn-runkeeper", title = "Log in using your Runkeeper account" })
                    <button type="submit" class="btn btn-provider btn-facebook" id="Facebook" name="provider" value="Facebook" title="Log in using your Facebook account">Facebook</button>
                    <button type="submit" class="btn btn-provider btn-twitter" id="Twitter" name="provider" value="Twitter" title="Log in using your Twitter account">Twitter</button>
                    @*<button type="submit" class="btn btn-provider btn-google" id="Google" name="provider" value="Google" title="Log in using your Google account">Google</button>*@
                </p>
            </div>
        }
    }
}

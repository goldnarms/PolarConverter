@using PolarConverter.JSWeb.Models
@using PolarConverter.DAL.Models
@model PolarConverter.JSWeb.ViewModels.UserViewModel
@{
    ViewBag.Title = "UserProfile";
}
<div data-ng-controller="userProfileCtrl as up">
    <div class="row">
        <div class="col-md-12">
            @if(Model.ActiveSubscription != null){
                <strong>Pro Subscription</strong>
                <p>
                    Subscription will continue to run until canceled. Next charge will come on: @Model.ActiveSubscription.EndTime.ToString("d")
                    @using (Html.BeginForm("AbortSubscription", "Account", new { id = @Model.ActiveSubscription.SubscriptionId}, FormMethod.Post, null))
                    {
                        <p><button type="submit" class="btn btn-primary btn-sm">Cancel subscription</button></p>
                    }
                </p>
                <h4>Services</h4>
                if (Model.RegisteredProviders.Any(p => p == ProviderType.Dropbox))
                {
                    <p><em>Dropbox connected</em> @Html.ActionLink("[Remove]", "RemoveProvider", "Services", new { id = 2 }, null)</p> 
                }
                else
                {
                    using (Html.BeginForm("ConnectToDropbox", "Services", FormMethod.Post, new {}))
                    {
                        <p><button type="submit" class="btn btn-primary btn-sm">Connect to Dropbox</button></p>
                    }
                }

                if (Model.RegisteredProviders.Any(p => p == ProviderType.Strava))
                {
                    <p><em>Strava connected</em> @Html.ActionLink("[Remove]", "RemoveProvider", "Services", new { id = 0 }, null)</p>
                }
                else
                {
                    using (Html.BeginForm("ConnectToStrava", "Services", FormMethod.Post, new {}))
                    {
                        <p><button type="submit" class="btn btn-provider btn-strava btn-sm">Connect to Strava</button></p>
                    }
                }
                if (Model.RegisteredProviders.Any(p => p == ProviderType.Runkeeper))
                {
                    <p><em>Runkeeper connected</em> @Html.ActionLink("[Remove]", "RemoveProvider", "Services", new { id = 1 }, null)</p>
                }
                else
                {
                    using (Html.BeginForm("ConnectToRunkeeper", "Services", FormMethod.Post, new {}))
                    {
<button type="submit" class="btn btn-provider btn-runkeeper btn-sm">Connect to Runkeeper</button>
                    }
                }
            }
            else{
<h6>Order Pro subscription</h6>
            using (Html.BeginForm("OrderSubscription", "Account", FormMethod.Post, new {}))
                    {
                        <button type="submit">Order (12$/yr)</button>
                    }
            }
        </div>
    </div>
    <div class="row" style="padding-top: 45px">
        <div class="col-md-12">
            <div class="well">
                @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <fieldset>
                        <legend>User profile</legend>
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                            </div>
                        </div>
                           <div class="form-group">
                            @Html.LabelFor(m => m.Weight, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Weight, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.BirthDate, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.BirthDate, new { @class = "form-control date" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.PreferKg, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <label>
                                    @Html.RadioButtonFor(m => m.PreferKg, "true") Kg
                                </label>
                                <label>
                                    @Html.RadioButtonFor(m => m.PreferKg, "false") Lbs
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.IsMale, new { @class = "col-md-2 control-label" })
                            <div class="col-md-10">
                                <label>
                                    @Html.RadioButtonFor(m => m.IsMale, "true") Male
                                </label>
                                <label>
                                    @Html.RadioButtonFor(m => m.IsMale, "false") Female
                                </label>
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-lg-12">
                                <input type="submit" class="btn btn-default" value="Save" />
                            </div>
                        </div>
                    </fieldset>
                    }
            </div>
        </div>
    </div>
</div>
